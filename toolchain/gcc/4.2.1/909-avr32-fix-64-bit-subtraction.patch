--- a/gcc/config/avr32/lib1funcs.S
+++ b/gcc/config/avr32/lib1funcs.S
@@ -547,9 +547,10 @@
         cbr     r11, 31
         cbr     r9, 31
  
-        /* Put the number with the largest exponent in [r11, r10]
-           and the number with the smallest exponent in [r9, r8] */
-        cp      r11, r9
+        /* Put the largest number in [r11, r10]
+           and the smallest number in [r9, r8] */
+        cp      r10, r8
+        cpc     r11, r9
         brhs    1f /* Skip swap if operands already correctly ordered*/
         /* Operands were not correctly ordered, swap them*/
         mov     r7, r11
@@ -564,7 +565,6 @@
         /* exp: r7 */
         /* sf:  r11, r10 */
         lsr     r7, r11, 20 /* Extract exponent */
-        cbr     r7, 11      /* Clear sign bit */
         lsl     r11, 11 /* Extract mantissa, leave room for implicit bit */ 
         or      r11, r11, r10>>21
         lsl     r10, 11
@@ -575,7 +575,6 @@
         /* exp: r6 */
         /* sf:  r9, r8 */
         lsr     r6, r9, 20 /* Extract exponent */
-        cbr     r6, 11     /* Clear sign bit */
         breq    __avr32_f64_sub_opL_subnormal /* If either zero or subnormal */
         lsl     r9, 11 /* Extract mantissa, leave room for implicit bit */ 
         or      r9, r9, r8>>21
@@ -832,7 +831,6 @@
         /* exp: r7 */
         /* sf:  r11, r10 */
         lsr     r7, r11, 20 /* Extract exponent */
-        cbr     r7, 11      /* Clear sign bit */
         lsl     r11, 11 /* Extract mantissa, leave room for implicit bit */ 
         or      r11, r11, r10>>21
         lsl     r10, 11
@@ -843,7 +841,6 @@
         /* exp: r6 */
         /* sf:  r9, r8 */
         lsr     r6, r9, 20 /* Extract exponent */
-        cbr     r6, 11     /* Clear sign bit */
         breq    __avr32_f64_add_opL_subnormal /* If either zero or subnormal */
         lsl     r9, 11 /* Extract mantissa, leave room for implicit bit */ 
         or      r9, r9, r8>>21
@@ -2586,4 +2583,4 @@
         
                 
 #endif
- 
\ No newline at end of file
+ 
