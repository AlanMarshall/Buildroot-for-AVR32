Index: qt-embedded-linux-opensource-src-4.4.0/src/corelib/arch/qatomic_avr32.h
===================================================================
--- qt-embedded-linux-opensource-src-4.4.0.orig/src/corelib/arch/qatomic_avr32.h	2008-05-28 14:24:40.000000000 +0200
+++ qt-embedded-linux-opensource-src-4.4.0/src/corelib/arch/qatomic_avr32.h	2008-01-24 14:44:35.000000000 +0100
@@ -100,64 +105,19 @@
 Q_INLINE_TEMPLATE bool QBasicAtomicPointer<T>::isFetchAndAddWaitFree()
 { return false; }
 
-#if defined(QT_BUILD_QREGION_UNIX_CPP)
-#warning "workaround!"
-__attribute__((noinline))
-#else
-inline
-#endif
-bool QBasicAtomicInt::ref()
-{
-    register int newValue;
-    asm volatile("0:\n"
-                 "ssrf %[LOCK]\n"
-                 "ld.w %[newValue], %[_q_value]\n"
-                 "add %[newValue], %[ONE]\n"
-                 "stcond %[_q_value], %[newValue]\n"
-                 "brne 0b\n"
-                 : [newValue] "=&r"(newValue),
-                   [_q_value] "+RKs16"(_q_value)
-                 : [LOCK] "i"(0x5),
-                   [ONE] "r"(1)
-                 : "cc", "memory");
-    return newValue;
+inline bool QBasicAtomicInt::ref()
+{
+    return __sync_add_and_fetch(&_q_value, 1);
 }
 
 inline bool QBasicAtomicInt::deref()
 {
-    register int newValue;
-    asm volatile("0:\n"
-                 "ssrf %[LOCK]\n"
-                 "ld.w %[newValue], %[_q_value]\n"
-                 "sub %[newValue], %[ONE]\n"
-                 "stcond %[_q_value], %[newValue]\n"
-                 "brne 0b\n"
-                 : [newValue] "=&r"(newValue),
-                   [_q_value] "+RKs16"(_q_value)
-                 : [LOCK] "i"(0x5),
-                   [ONE] "i"(1)
-                 : "cc", "memory");
-    return newValue;
+    return __sync_sub_and_fetch(&_q_value, 1);
 }
 
 inline bool QBasicAtomicInt::testAndSetOrdered(int expectedValue, int newValue)
 {
-    register int originalValue;
-    asm volatile("0:\n"
-                 "ssrf %[LOCK]\n"
-                 "ld.w %[originalValue], %[_q_value]\n"
-                 "cp.w %[originalValue], %[expectedValue]\n"
-                 "brne 0f\n"
-                 "stcond %[_q_value], %[newValue]\n"
-                 "brne 0b\n"
-                 "0:\n"
-                 : [originalValue] "=&r"(originalValue),
-                   [_q_value] "+RKs16"(_q_value)
-                 : [LOCK] "i"(0x5),
-                   [expectedValue] "r"(expectedValue),
-                   [newValue] "r"(newValue)
-                 : "cc", "memory");
-    return originalValue == expectedValue;
+    return __sync_bool_compare_and_swap(&_q_value, expectedValue, newValue);
 }
 
 inline bool QBasicAtomicInt::testAndSetRelaxed(int expectedValue, int newValue)
@@ -177,14 +137,7 @@
 
 inline int QBasicAtomicInt::fetchAndStoreOrdered(int newValue)
 {
-    register int originalValue;
-    asm volatile("xchg %[originalValue], %[_q_value], %[newValue]"
-                 : [originalValue] "=&r"(originalValue),
-                   "+m" (_q_value)
-                 : [_q_value] "r"(&_q_value),
-                   [newValue] "r"(newValue)
-                 : "cc", "memory");
-    return originalValue;
+    return __sync_lock_test_and_set(&_q_value, newValue);
 }
 
 inline int QBasicAtomicInt::fetchAndStoreRelaxed(int newValue)
@@ -204,20 +157,7 @@
 
 inline int QBasicAtomicInt::fetchAndAddOrdered(int valueToAdd)
 {
-    register int originalValue, newValue;
-    asm volatile("0:\n"
-                 "ssrf %[LOCK]\n"
-                 "ld.w %[originalValue], %[_q_value]\n"
-                 "add %[newValue], %[originalValue], %[valueToAdd]\n"
-                 "stcond %[_q_value], %[newValue]\n"
-                 "brne 0b\n"
-                 : [originalValue] "=&r"(originalValue),
-                   [newValue] "=&r"(newValue),
-                   [_q_value] "+RKs16"(_q_value)
-                 : [LOCK] "i"(0x5),
-                   [valueToAdd] "r"(valueToAdd)
-                 : "cc", "memory");
-    return originalValue;
+    return __sync_fetch_and_add(&_q_value, valueToAdd);
 }
 
 inline int QBasicAtomicInt::fetchAndAddRelaxed(int valueToAdd)
@@ -238,22 +178,7 @@
 template <typename T>
 Q_INLINE_TEMPLATE bool QBasicAtomicPointer<T>::testAndSetOrdered(T *expectedValue, T *newValue)
 {
-    register T *originalValue;
-    asm volatile("0:\n"
-                 "ssrf %[LOCK]\n"
-                 "ld.w %[originalValue], %[_q_value]\n"
-                 "cp.w %[originalValue], %[expectedValue]\n"
-                 "brne 0f\n"
-                 "stcond %[_q_value], %[newValue]\n"
-                 "brne 0b\n"
-                 "0:\n"
-                 : [originalValue] "=&r"(originalValue),
-                   [_q_value] "+RKs16"(_q_value)
-                 : [LOCK] "i"(0x5),
-                   [expectedValue] "r"(expectedValue),
-                   [newValue] "r"(newValue)
-                 : "cc", "memory");
-    return originalValue == expectedValue;
+    return __sync_bool_compare_and_swap(&_q_value, expectedValue, newValue);
 }
 
 template <typename T>
@@ -277,14 +202,7 @@
 template <typename T>
 Q_INLINE_TEMPLATE T *QBasicAtomicPointer<T>::fetchAndStoreOrdered(T *newValue)
 {
-    register T *originalValue;
-    asm volatile("xchg %[originalValue], %[_q_value], %[newValue]"
-                 : [originalValue] "=&r"(originalValue),
-                   "+m" (_q_value)
-                 : [_q_value] "r"(&_q_value),
-                   [newValue] "r"(newValue)
-                 : "cc", "memory");
-    return originalValue;
+    return __sync_lock_test_and_set(&_q_value, newValue);
 }
 
 template <typename T>
@@ -308,20 +226,7 @@
 template <typename T>
 Q_INLINE_TEMPLATE T *QBasicAtomicPointer<T>::fetchAndAddOrdered(qptrdiff valueToAdd)
 {
-    register T *originalValue, *newValue;
-    asm volatile("0:\n"
-                 "ssrf %[LOCK]\n"
-                 "ld.w %[originalValue], %[_q_value]\n"
-                 "add %[newValue], %[originalValue], %[valueToAdd]\n"
-                 "stcond %[_q_value], %[newValue]\n"
-                 "brne 0b\n"
-                 : [originalValue] "=&r"(originalValue),
-                   [newValue] "=&r"(newValue),
-                   [_q_value] "+RKs16"(_q_value)
-                 : [LOCK] "i"(0x5),
-                   [valueToAdd] "r"(valueToAdd * sizeof(T))
-                 : "cc", "memory");
-    return originalValue;
+    return __sync_fetch_and_add(&_q_value, valueToAdd * sizeof(T));
 }
 
 template <typename T>
